---
description:
globs:
alwaysApply: false
---

# Rule: Mindful Task Implementation and Reflection

## Philosophy

This process transforms task execution into a cycle of **Plan -> Implement -> Reflect**. However, the goal is not robotic hand-holding, but meaningful partnership. The AI must differentiate between simple, mechanical tasks and complex, substantive ones, applying deep Socratic inquiry only when it fosters genuine learning and critical thinking.

## Guiding Principle: Task Significance

Before starting any task, the AI must first assess its significance.

### 1. Mechanical Tasks

These are simple, boilerplate, or configuration actions that don't involve complex logic or creative problem-solving.
*   **Examples:** Creating empty directories/files (`__init__.py`), installing dependencies, setting up linting configurations, running code formatters.
*   **Behavior:** For these tasks, the AI should **skip the full reflection cycle**. It should announce the task(s), execute them, mark them complete, and move on. It is encouraged to **batch** several related mechanical tasks together for efficiency.

### 2. Substantive Tasks

These are tasks that involve logic, design, problem-solving, or creative work. These are the core of the feature implementation.
*   **Examples:** Implementing an algorithm, designing a state management structure, building a UI component, writing business logic, refactoring for performance, writing complex tests.
*   **Behavior:** These tasks **must** use the full **Plan -> Implement -> Reflect** cycle. This is where reflection provides the most value.

## The Adaptive Implementation Cycle

1.  **Assess the Task:** The AI reads the next sub-task from the list. It makes a judgment: is this task Mechanical or Substantive?

2.  **Execute Based on Significance:**

    *   **If Mechanical:**
        *   **AI:** "The next task is `Create the src/state directory and its __init__.py file`. This is a straightforward setup task, so I'll complete it now."
        *   *(The AI performs the action.)*
        *   **AI:** "Done. I've marked that task as complete. The next task is..."
        *   *(The AI can also choose to batch tasks: "The next three tasks are all file setup. I'll create the directory, the empty model file, and the test file, and then report back.")*

    *   **If Substantive:**
        *   **AI:** "Our next task is `Implement the core state update logic`. Since this involves the central logic of our feature, let's use our reflection cycle."
        *   **(Proceed to Step 3: The Plan-Implement-Reflect Cycle).**

## The Plan-Implement-Reflect Cycle (for Substantive Tasks Only)

#### A. The Plan (Before Writing Code)
*   **AI Prompts for a Plan:** **"Before we write any code, let's sketch out a plan. What's your approach to implementing this logic? Which functions or classes will you need?"**
*   **User Articulates the Plan:** The user describes their intended actions.
*   **AI Provides Feedback/Confirmation:** "That sounds like a solid approach. It aligns with the PRD. Ready to implement it?"

#### B. The Implementation (User's Turn)
*   The user performs the work to complete the substantive sub-task.

#### C. The Reflection (After Writing Code)
*   **User Signals Completion.**
*   **AI Prompts for Reflection:**
    *   "Great, the code is written. Before we mark this as complete, let's reflect:
    *   **1. Did the implementation reveal any hidden complexities or edge cases we didn't plan for?**
    *   **2. Looking at the new code, is it as clear and maintainable as it could be?**
    *   **3. What was the most critical decision you made during this task?"**
*   **User Reflects**, answering the questions.

#### D. Update and Proceed
*   **AI Acknowledges and Updates:** "Thank you. Those are valuable insights. I'm marking this task `[x]`."
*   The AI then moves to assess the next task in the list.
